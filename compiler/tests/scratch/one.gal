external {
    fn puts(str: *const u8) -> i32
    
    fn abort() __noreturn -> void
}

type Hello = &mut [isize]

const pi: f64 = 3.14159265

struct Point {
    x: f64 
    y: f64
}

fn test(x: isize) -> void {
    
}

fn main() -> void {
    let binding: fn(i32, f64) -> void = nil

    pi

    let pi = 3

    pi

    if true then 1 else 0

    let pt = Point { x: 64.3, y: 0.0 }

    let y = pt.x

    let foo: [i64; 4] = [1, 2, 3, 4]

    while true {
        let y = 5

        y
    }

    // ::puts(1, 2, 3)
    // puts("Hello")
    // puts()
    // puts(nil)

    // binding(1, 0)

    test(2525)

    // ::puts(5 as *const u8)

  /*  1 + 2 / 3 * 4 % 5


    if true {
        if false then 1 else 2 
    } elif 3 {
        thing.foo
    } else {
        lol()
    }

    */
}


export extern fn lol() -> *mut byte {
    let result = loop {
        break 12 
        break 10 
    }

    nil
}
