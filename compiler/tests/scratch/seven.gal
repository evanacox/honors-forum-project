fn thing(x: i32) -> i32 {
    let a = ~x
    let b = -a 
    let c = not (b as bool)

    c as i32
}

fn check_condition() -> bool { 
    true
}

external {
    fn invisible() -> void

    fn invisible2() -> void 

    fn invisible3() -> void
}

struct Point {
    x: f64
    y: f64
}

fn get_distance(pt: &Point) -> f64 {
    pt.x
}

fn get_fifth(slice: [i32]) -> i32 {
    slice[5]
}

fn get_fifth(array: &[i32; 4]) -> i32 {
    array[3]
}

fn negate(x: i32) -> i32 {
    mut a = true 

    while not a {
        if check_condition() {
            check_condition()
        } elif true {
            invisible()
        } elif false {
            invisible2()
        } else {
            invisible3()
        }
    }

    5
}
