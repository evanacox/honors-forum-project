// test: should-run
// returns: 0
// outputs: none

external {
    fn malloc(size: usize) -> *mut byte
    fn free(ptr: *mut byte) -> void
}

struct Point3D {
    x: f64
    y: f64
    z: f64
}

fn allocate(size: isize) -> [mut Point3D] {
    let size_bytes = (size * sizeof Point3D) as usize
    let ptr = ::malloc(size_bytes) as! *mut Point3D

    [ptr len size]
}

fn deallocate(slice: [mut Point3D]) -> void {
    ::free(slice.data as! *mut byte)
}

fn main() -> i32 {
    let data = allocate(5)

    for i := 0 to data.size {
        data[i] := Point3D { 
            x: (i as f64) + 1.0, 
            y: (i as f64) + 2.0, 
            z: (i as f64) + 3.0 
        }
    }

    for i := 0 to data.size {
        assert data[i].x == (i as f64) + 1.0
        assert data[i].y == (i as f64) + 2.0
        assert data[i].z == (i as f64) + 3.0
    }

    deallocate(data)

    0
}